<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XT 技术联合小组</title>
    <link>https://o2ospring.github.io/xt/post/</link>
    <description>Recent content in Posts on XT 技术联合小组</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2023</copyright>
    <lastBuildDate>Mon, 08 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://o2ospring.github.io/xt/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>精简版单/双色灯调光服务模块</title>
      <link>https://o2ospring.github.io/xt/post/20230508/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230508/</guid>
      <description>一、构架 1、功能简介
精简版单/双色灯调光服务模块只支持直线调光调色，以尽量小的程序空间集成尽量多的核心功能为目的，主要针对 2K ROM 级别的单片机而开发。具体功能包括：可设亮度的直线调光、可设色温的直线调色、可设时间的渐变过程。亮度支持 1%~100% 调节，精度为 0.1%，其中亮度设置为 0xFFFF 或 0 表示开灯或关灯控制。调色支持 2700~6500K 色阶调节，精度为 100K，还支持 0~100% 等级调色，精度为 1%，其中色温设置为 0xFF 表示不改变色温。渐变时间支持 0~100秒 调节，精度为 0.1秒，其中渐变时间设置为 0 表示即时控制目标值，没有渐变过程；而渐变时间设置为 0x7FFF或0xFFFF 表示以默认时间渐变；而渐变时间的 bit15 设置为 1 表示是全程渐变时间，相当于指定渐变速率来调光调色。备注：关于两路 PWM 的错峰控制，由具体硬件驱动来支持。
2、模块架构
备注：由于调光过程的每步操作在中断中会有一定的运算量，所以xt_led_pwmm_isr_loop()所在中断的优先级要设置较低，避免影响其它中断的实时性！
3、模块特性
3.1、直线渐变调光特性图：
备注：上图包括某色温下开关灯过程，以及几种色温的切换过程。
3.2、更多的调光调色知识：
说明：更多调光调色知识，请移步《单/双色灯调光服务模块》
4、模块大小
备注：关闭色温的色阶调节，关闭渐变时间的全程渐变，从而缩减程序大小（最后约 1K 大小）。
5、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 2K ROM 大小的 MCU    二、移植 1、添加源文件</description>
    </item>
    
    <item>
      <title>单/双色灯调光服务模块</title>
      <link>https://o2ospring.github.io/xt/post/20230413/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230413/</guid>
      <description>一、构架 1、功能简介
单/双色灯调光服务模块是灯光控制系统中一个核心模块，主要为 开关灯、渐变调光、色温切换 三大功能。具体功能包括：指定色温切换、固定色温切换、曲线调光（查表法）、直线调光、手控调光、紧急关断（过流保护）、前置联动调光（交流斩波占空比联动调光）、控制锁定（特殊用途）、掉电参数保存。其中调色（2700~6500K，精度：100K）、调光控制都可以任意设置亮度（1%~100%，精度：0.1%）、渐变时间（0~100秒，精度：0.1秒，包括全程渐变时间【相当于渐变速率】和行程渐变时间，渐变行程可实现 10ms 级别高精度的时间控制），以及 PWM 输出支持错峰控制（由具体硬件驱动来支持，后期还会加入低亮度时使用 PFM 来调光），从而减小对电源冲击。补充：关于某些异常情况需要亮灯（如：发生故障时亮灯）等这类操作或者设置属于应用业务范畴，本服务模块不会增加此类功能支持！
2、模块架构
备注：由于调光过程的每步操作在中断中都会较大的运算量，所以xt_led_pwm_isr_loop()所在中断的优先级要设置较低，避免影响其它中断的实时性！
3、模块特性
3.1、亮度-电流-PWM 关系图：
 从网上资料及实测得这一结论：亮度、电流、PWM占空比 这三者的两两关系都是接近直线的线性关系。也就是说，控制 PWM 输出的占空比，就是控制亮度的百分比。下面的左图是亮度与电流的关系图，右图是实测出的 PWM 占空比与电流关系图：
 3.2、曲线公式与渐变曲线图：
 调光渐变曲线的目的只是让人眼在调光过程中感觉到舒适和平滑，但它并不是感官或实际亮度的均匀渐变！那为什么要曲线调光？那是因为我们人眼有一个生理特征：对弱光敏感度高，对强光敏感度低。生活中有一现象可以说明这个生理特征，当使用强光照射我们眼睛时，强光影像可以停留十多秒以上；而当弱光照射眼睛时，因为一般亮度的影像在人脑中只会停留几十到几百毫秒左右，所以感觉不出残留。正是这一生理特征会造成在低亮度调光时，我们很容易察觉亮度是梯级性的变化，也就是平常说的亮度“抖动”（注：出现“抖动”现象还与电路性能有关）。也正是这一生理特征，我们观察时发现渐亮容易抖动而渐暗较少抖动的原因。下图是常用的调光曲线和公式，图中的“3”代表曲线的曲度，如果改大则曲线就会越曲，反之曲线越直。本模块参照 DALI 标准将曲线一共分 254 等级（分段），调光时程序会将每一小段再进行细分，使调光曲线具有更高精确度的变化，具体细节可观察下图：
 3.3、分段内细分的渐变表现：
 本模块渐变节拍一般定义为 2 毫秒，假如渐变时间为 1 秒，PWM 值由 0 ~ 500 变化，则渐变总节拍数为 500，渐变过程就是每节拍 +1 个 PWM 值。但实际上往往不能整除，PWM 输出值必定要整数，本模块采用的算法：假如 PWM 值由 0 ~ 1234 变化，渐变总节拍数为 500，则 1234(PWM值)÷500(节拍) = 2 …… 234(余数)，那么 1234 = ((2)x(500-234)) + ((2+1)x(234))，即：前段 (500-234) 节拍中每节拍 +2 个 PWM 值，后段 (234) 节拍中每节拍 +3 个 PWM 值。下图是某个渐变动作的曲线图，可看出其中某一分段变化的特性：</description>
    </item>
    
    <item>
      <title>MD5、SHA 摘要算法</title>
      <link>https://o2ospring.github.io/xt/post/20230227/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230227/</guid>
      <description>一、说明 1、功能简介
包含 MD5、SHA1、SHA224、SHA256、SHA512 非常适合嵌入式工程使用，单文件，无耦合。
SHA 系列算法：
 20字节 结果：SHA1； 32字节 结果：SHA224、SHA256； 64字节 结果：SHA384、SHA512、SHA512/224、SHA512/256；  SHA、MD5、AES、DES 摘要/加密算法简介：
 SHA　不可逆过程的摘要算法，结果是【20字节】【32字节】【64字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 MD5　不可逆过程的摘要算法，结果是 128位【16字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 AES　新一代的对称加密算法，密钥长度可以选择 128位【16字节】，192位【24字节】和 256位【32字节】密钥。 DES　比较老的对称加密算法，密钥长度是 56位【7字节】。一共有三个参数入口：原文，密钥，加密模式。 3DES 比较老的对称加密算法，加长了密钥长度，可以为 112位【14字节】 或 168位【21字节】。 RSA　非对称加密，有公钥和私钥。公钥可公开给公众对数据加密，私钥则是私人对数据解密不能公开。  资源：gitee 仓库、mbedtls 库
2、环境要求    环境 要求     软件环境 无特别要求   硬件环境 有一定要求   依赖环境 无特别要求    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#include &amp;#34;md5.</description>
    </item>
    
    <item>
      <title>MD5 摘要算法</title>
      <link>https://o2ospring.github.io/xt/post/20230226/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230226/</guid>
      <description>一、说明 1、功能简介
MD5 是摘要算法[哈希算法]，可对任意长度的数据变换成一个 128bit（即：16字节） 的“数据指纹”，用于生成密钥并检测文档是否被篡改。
资源：github 仓库、原作者仓库、原作者博文
更多：pod32g-MD5、chinaran-md5
SHA、MD5、AES、DES 摘要/加密算法简介：
 SHA　不可逆过程的摘要算法，结果是【20字节】【32字节】【64字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 MD5　不可逆过程的摘要算法，结果是 128位【16字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 AES　新一代的对称加密算法，密钥长度可以选择 128位【16字节】，192位【24字节】和 256位【32字节】密钥。 DES　比较老的对称加密算法，密钥长度是 56位【7字节】。一共有三个参数入口：原文，密钥，加密模式。 3DES 比较老的对称加密算法，加长了密钥长度，可以为 112位【14字节】 或 168位【21字节】。 RSA　非对称加密，有公钥和私钥。公钥可公开给公众对数据加密，私钥则是私人对数据解密不能公开。  2、环境要求    环境 要求     软件环境 无特别要求   硬件环境 有一定要求   依赖环境 无特别要求    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#include &amp;#34;md5.h&amp;#34;三、使用 1、应用示例
#include &amp;#34;md5.h&amp;#34; MD5_CTX md5; //MD5对象 unsigned char datsrc[13] = {12, 222, 11, 83, 4, 5, 189, 21, 48}; //要运算的数据 unsigned char result[16]; //结果寄存器  //每次运算 MD5 码，必须依次调用 3 个函数进行操作： MD5Init(&amp;amp;md5); //初始化 MD5Update(&amp;amp;md5, datsrc, sizeof(datsrc)); //导入数据（此处可以多次导入多段数据） 【备注：进行初步分组加密】 MD5Final(&amp;amp;md5, result); //计算并输出 16 字节 MD5 到 result[]【备注：进行后序的补足】  </description>
    </item>
    
    <item>
      <title>AES-128 加密算法</title>
      <link>https://o2ospring.github.io/xt/post/20230225/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230225/</guid>
      <description>一、说明 1、功能简介
本 AES-128 模块的密钥长度只支持 128位【16字节】，并且要求数据长度必须 16 字节对齐，否则需要用户自行填充对齐（一般填充 0）。
资源：github 仓库、gitcode 加速、作者博文
SHA、MD5、AES、DES 摘要/加密算法简介：
 SHA　不可逆过程的摘要算法，结果是【20字节】【32字节】【64字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 MD5　不可逆过程的摘要算法，结果是 128位【16字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 AES　新一代的对称加密算法，密钥长度可以选择 128位【16字节】，192位【24字节】和 256位【32字节】密钥。 DES　比较老的对称加密算法，密钥长度是 56位【7字节】。一共有三个参数入口：原文，密钥，加密模式。 3DES 比较老的对称加密算法，加长了密钥长度，可以为 112位【14字节】 或 168位【21字节】。 RSA　非对称加密，有公钥和私钥。公钥可公开给公众对数据加密，私钥则是私人对数据解密不能公开。  2、环境要求    环境 要求     软件环境 无特别要求   硬件环境 有一定要求   依赖环境 无特别要求    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#include &amp;#34;AES.h&amp;#34;三、使用 1、应用示例
#include &amp;#34;AES.h&amp;#34; uint8_t key[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}; uint8_t dat[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34}; uint8_t buf[16] = {0}; //要求++++++++++++++++++++++++++++++ //1、密钥长度固定为[16]字节，不能改！ //2、数据长度须对齐[16]字节，否则用户自行填充对齐（例如填充0对齐） //3、因模块调用`printf()`函数，如果你程序环境不支持时，请屏蔽它！  //加密++++++++++++++++++++++++++++++ aesEncrypt(key/*密钥*/, 16/*密钥长度*/, dat/*将要加密数据*/, buf, 16/*数据长度*/); //解密++++++++++++++++++++++++++++++ memcpy(dat, buf, 16); aesDecrypt(key/*密钥*/, 16/*密钥长度*/, dat/*将要解密数据*/, buf, 16/*数据长度*/); </description>
    </item>
    
    <item>
      <title>MD5、AES、DES 摘要/加密算法</title>
      <link>https://o2ospring.github.io/xt/post/20230224/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230224/</guid>
      <description>一、说明 1、功能简介
SHA、MD5、AES、DES 摘要/加密算法简介：
 SHA　不可逆过程的摘要算法，结果是【20字节】【32字节】【64字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 MD5　不可逆过程的摘要算法，结果是 128位【16字节】，主要用途有：验证消息完整性，安全访问认证，数据签名。 AES　新一代的对称加密算法，密钥长度可以选择 128位【16字节】，192位【24字节】和 256位【32字节】密钥。 DES　比较老的对称加密算法，密钥长度是 56位【7字节】。一共有三个参数入口：原文，密钥，加密模式。 3DES 比较老的对称加密算法，加长了密钥长度，可以为 112位【14字节】 或 168位【21字节】。 RSA　非对称加密，有公钥和私钥。公钥可公开给公众对数据加密，私钥则是私人对数据解密不能公开。  资源：gitee 仓库、网文
MD5 原作者：仓库、作者博文
AES 原作者：仓库、作者博文
特别说明：《rijndael.c》《3des.h》可能是基于 linux 系统开发，它们里面的头文件包含要改为：
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;2、环境要求    环境 要求     软件环境 无特别要求   硬件环境 有一定要求   依赖环境 无特别要求    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#include &amp;#34;md5.h&amp;#34;#include &amp;#34;rijndael.h&amp;#34;#include &amp;#34;3des.h&amp;#34;三、使用 1、MD5 应用示例</description>
    </item>
    
    <item>
      <title>CRC 校验算法</title>
      <link>https://o2ospring.github.io/xt/post/20230223/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20230223/</guid>
      <description>一、说明 1、功能简介
 CRC 循环冗余校验（Cyclic Redundancy Check）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。CRC 成为计算机信息通信领域最为普遍的校验方式。常见应用有以太网/USB通信，压缩解压，视频编码，图像存储，磁盘读写等。 CRC 所操作的原始数据以【大端】序列格式进行处理与传送，不过本 CRC 模块运算函数入口指向的原始数据指针是【单字节指针】，所以一般不需要理会大小端问题。 特别说明：为什么 STM32 处理器的硬件 CRC 运算与本模块运算的结果不一样？因为 STM32 处理器为【小端】数据处理方式，CRC 规则要求为【大端】数据处理方式（标准的 CRC 函数的入口以及内部处理都是以字节作为基本处理单元，这样可以避免出现大小端格式问题，同时避免尾部 4 字节补齐填充问题）。 本模块提供 21 个标准 CRC 参数模型。  资源：github 仓库
2、环境要求    环境 要求     软件环境 无特别要求   硬件环境 无特别要求   依赖环境 无特别要求    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#include &amp;#34;crcLib.h&amp;#34;三、使用 1、应用示例
#include &amp;#34;crcLib.h&amp;#34; uint8_t buf[] = {0x1, 2, 3, 4, 5, 0x67, 8, 9, 0x10, 0xAB, 0xCD, 0xEF}; //要计算的数据 uint32_t crc; //计算结果缓存  crc = crc32((uint8_t *)buf, sizeof(buf)); //计算出CRC32结果（其它CRC函数使用方法一样的）  </description>
    </item>
    
    <item>
      <title>VOFA&#43; 网络虚拟数字示波器</title>
      <link>https://o2ospring.github.io/xt/post/20221216/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221216/</guid>
      <description>一、构架 1、功能简介
网络虚拟数字示波器模块为我们将数据通过网络传输到 PC 软件上，并以示波曲线方式显示出来，方便我们对数据的分析，提高调试效率。它提供三种操作接口：修改一路、多路、多路连续通道，并发送所有通道状态。虚拟数字示波器同时具备编写控件向设备发送控制命令！
2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统（偏向 RT-Thread）   硬件环境 STM32F103 及更高性能 MCU   依赖环境 依赖【xt_wiznet】网络通信服务模块    4、软件简介
我们做项目时，往往需要查看数据曲线。例如：查看单片机使用率的曲线、查看 AD 读出温度值的曲线、查看电机转速的曲线…… 那么有没有像示波器一样显示曲线图的工具呢？当然是有的，今天为大家介绍一款虚拟示波器软件 VOFA+（伏特加）。VOFA+ 虚拟示波器是一个电脑软件，它将通过串口、UDP、TCP 传输给电脑的数据以示波曲线方式显示出来，方便我们对数据分析，是您必不可缺的开发助手。VOFA+ 支持 FireWater、JustFloat、RawData 三种数据格式，支持多通道的波形显示，支持 X、Y 轴任意缩放及移动，支持打开与保存波形数据。
© 本段介绍摘自《一春又一春》博文 ©
二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、加入初始函数
在应用初始化函数中加入模块初始化，示例：
void rt_init_thread_entry(void *p_arg) { . . #if (XT_APP_WIZNETVOFA_EN == XT_DEF_ENABLED) 	xt_wizvofa_init(); #endif 	. . #if (XT_APP_WIZNETVOFA_EN == XT_DEF_ENABLED) 	#if (XT_WIZVOFA_POWERON_EN !</description>
    </item>
    
    <item>
      <title>WIZnet 网络服务模块（硬件网络栈）</title>
      <link>https://o2ospring.github.io/xt/post/20221210/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221210/</guid>
      <description>一、构架 1、功能简介
 WIZnet 为我们提供全硬件 TCP/IP 嵌入式以太网控制器，为嵌入式系统提供了更加简易的互联网连接方案。其集成了 TCP/IP 协议栈，10/100M 以太网数据链路层(MAC)及物理层(PHY)，使得用户使用单芯片就能够在他们的应用中拓展网络连接。用户可以同时使用 4 或 8 个硬件 Socket 独立通讯。提供 SPI 接口,从而能够更加容易与主控 MCU 整合。使用高效 SPI 协议支持 80MHz 速率，从而能够更好的实现高速网络通讯。
主要特点：   支持硬件 TCP/IP 协议：TCP, UDP, ICMP, IPv4, ARP, IGMP, PPPoE 支持 4 或 8 个独立端口（Socket）同时通讯 支持掉电模式 支持网络唤醒 支持高速串行外设接口（SPI 模式 0，3） 内部 8K 或 32K 字节收发缓存 内嵌 10BaseT/100BaseTX 以太网物理层（PHY） 支持自动协商（10/100-Based 全双工/半双工） 不支持 IP 分片 3.3V 工作电压，I/O 信号口 5V 耐压； LED 状态显示（全双工/半双工，网络连接，网络速度，活动状态）；  2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统   硬件环境 STM32F103 及更高性能 MCU    4、厂家代码</description>
    </item>
    
    <item>
      <title>无序控制事件服务</title>
      <link>https://o2ospring.github.io/xt/post/20221205/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221205/</guid>
      <description>一、构架 1、功能简介
对于一些无序控制事件或者是由应用业务掌控的有序事件，我们只需使用简单的标志位来标记它，协助应用程序完成由生产到消费的过程。例如：智能家居系统对接第三方设备，一款卫浴壁挂炉，它只有开关机、设置温度两种操作，这两条控制指令无时序要求，任何时刻发送过去都可受理。处理方法：使用两位标志位标记，高位标志为新控制事件，低位标志为执行事件，通过两个标志位组合可标记出：新事件、执行、完成等多种状态，根据这些状态配合应用程序完成相关控制的过程。
2、模块架构
当收到有新控制时：则为XX→1X，调用函数xt_cef2_set_new_flag()设置；
应用去查有新控制：则为10→01，调用函数xt_cef2_is_goto_run()判断（返回非 0 表示执行）；
应用收到控制返回：则为X1→X0，调用函数xt_cef2_set_end_flag()设置；
而没收到控制返回：则为X1→10，调用函数xt_cef2_set_retry_flag()重置；
3、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 STM8 及更高性能 MCU    二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、包含头文件
在使用模块的应用程序中加入头文件包含，示例：
#if (XT_APP_CEF2_EN == XT_DEF_ENABLED) #include &amp;#34;xt_cef2.h&amp;#34;#endif 3、配置模块参数
根据实际的使用环境配置模块参数，示例：
补充说明：由于标准模块是不允许用户修改的，所以在应用时请启用头文件映射，在映射头文件修改配置！
4、使能模块开关
在工程头文件《application.h》统一使能模块开关，示例：
#define XT_DEF_DISABLED 0 /* 禁用模块 */#define XT_DEF_ENABLED 1 /* 使能模块 */ #define __XT_CEF2_REMAP_H #ifndef XT_APP_CEF2_EN #define XT_APP_CEF2_EN XT_DEF_ENABLED /* 控制事件标志服务模块 */#endif 三、使用 1、应用示例</description>
    </item>
    
    <item>
      <title>VOFA&#43; 串口虚拟数字示波器</title>
      <link>https://o2ospring.github.io/xt/post/20221203/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221203/</guid>
      <description>一、构架 1、功能简介
串口虚拟数字示波器模块为我们将数据通过串口传输到 PC 软件上，并以示波曲线方式显示出来，方便我们对数据的分析，提高调试效率。它提供三种操作接口：修改一路、多路、多路连续通道，并发送所有通道状态。虚拟数字示波器同时具备编写控件向设备发送控制命令！
2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 STM8 或 STM32F103 及更高性能 MCU   依赖环境 依赖【xt_scom】串行通信服务模块    4、软件简介
我们做项目时，往往需要查看数据曲线。例如：查看单片机使用率的曲线、查看 AD 读出温度值的曲线、查看电机转速的曲线…… 那么有没有像示波器一样显示曲线图的工具呢？当然是有的，今天为大家介绍一款虚拟示波器软件 VOFA+（伏特加）。VOFA+ 虚拟示波器是一个电脑软件，它将通过串口、UDP、TCP 传输给电脑的数据以示波曲线方式显示出来，方便我们对数据分析，是您必不可缺的开发助手。VOFA+ 支持 FireWater、JustFloat、RawData 三种数据格式，支持多通道的波形显示，支持 X、Y 轴任意缩放及移动，支持打开与保存波形数据。
© 本段介绍摘自《一春又一春》博文 ©
二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、加入初始函数
在应用初始化函数中加入模块初始化，示例：
void rt_init_thread_entry(void *p_arg) { . . #if (XT_APP_SCOMVOFA_EN == XT_DEF_ENABLED) 	xt_scomvofa_init(); #endif 	#if (XT_APP_SCOMVOFA_EN == XT_DEF_ENABLED) 	xt_scomvofa_open(); #endif 	.</description>
    </item>
    
    <item>
      <title>Visual Scope 串口虚拟数字示波器</title>
      <link>https://o2ospring.github.io/xt/post/20221201/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221201/</guid>
      <description>一、构架 1、功能简介
串口虚拟数字示波器模块为我们将数据通过串口传输到 PC 软件上，并以示波曲线方式显示出来，方便我们对数据的分析，提高调试效率。它提供三种操作接口：修改一路、多路、多路连续通道，并发送所有通道状态。
2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 STM8 或 STM32F103 及更高性能 MCU   依赖环境 依赖【xt_scom】串行通信服务模块    4、软件简介
我们做项目时，往往需要查看数据曲线。例如：查看单片机使用率的曲线、查看 AD 读出温度值的曲线、查看电机转速的曲线…… 那么有没有像示波器一样显示曲线图的工具呢？当然是有的，今天为大家介绍一款串口虚拟示波器软件 Visual Scope（Serial Digital Scope）。Visual Scope 串口虚拟示波器是一个电脑软件，它将通过串口传输给电脑的数据以示波曲线方式显示出来，方便我们对数据分析，是您必不可缺的开发助手。Visual Scope 支持 4 通道的波形显示，支持 X、Y 轴任意缩放及移动，支持打开与保存波形数据的 Matlab 分析文件，支持 check sum 和 CRC16 两种数据校验方式。
© 本段介绍摘自《一春又一春》博文 ©
二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、加入初始函数
在应用初始化函数中加入模块初始化，示例：
void rt_init_thread_entry(void *p_arg) { .</description>
    </item>
    
    <item>
      <title>软件平台使用</title>
      <link>https://o2ospring.github.io/xt/post/20221128/</link>
      <pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221128/</guid>
      <description>一、通用技术开发平台的使用  目前平台使用到的工具有：git、make、cgdb、arm-none-eabi-gdb、arm-none-eabi-gcc、openOCD、libusb 等。关于这些工具的安装及使用，以后再进一步介绍。本章节主要是以最简单的方式介绍开发平台的编译与调试：
 1、下载工程：
git clone --recursive https://github.com/o2ospring/xt_rt-thread.git 2、进入工程：
cd xt_rt-thread/bsp/stm32/xt_stm32f103/ 3、清除文件
make clean 4、编译工程：
make all 5、烧录固件：
make download 6、进入调试：
make debug 7、命令总览：
make clean //清除 make all //编译 make download //烧录 make debug //调试 备注：可输入make help查看目前支持的操作命令！
二、DALI 灯具开发平台的使用 待续……
三、KNX 系统开发平台的使用 待续……</description>
    </item>
    
    <item>
      <title>串行通信服务模块</title>
      <link>https://o2ospring.github.io/xt/post/20221127/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221127/</guid>
      <description>一、构架 1、功能简介
串行通信模块是为应用程序操作串口提供统一、规范的驱动接口。它支持 1～n 个串口通讯（由驱动程序XT_SCOM_SUM配置决定），支持绝大部分串口传输协议（数据第 9 bit 作为整帧数据起始标志这种方式目前还不支持），并在接收时已对数据进行初步的分帧（不过应用层还需要进一步判断分帧是否正确）。
2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 STM8 或 STM32F103 及更高性能 MCU    4、协议知识
串口通讯协议格式一般分为：固定长数据帧、可变长数据帧、纯文本协议三种类型。关于它们的优缺点及设计要点，可参考网文：PC 机与嵌入式设备通信协议设计的原则。
二、移植 1、添加源文件
将模块源文件、文件包含路径添加到工程，示例：
2、加入引脚定义
在工程头文件《board.h》统一加入引脚定义，示例：
// 串行通信服务+++++++++++++++++++++++ // 串行通信模块-定时器（串口+公共定时器）──┐ extern void xt_scomx_tim_irqhandler(void); //├→★★硬件驱动二选一★★ /* 公共定时器中断中每1ms调用1次 */ // 串行通信模块-定时器（串口+独立定时器）──┘ #define XT_SCOMx_TIM TIM1 /* 定时器 */#define XT_SCOMx_TIM_CLK_EN() __HAL_RCC_TIM1_CLK_ENABLE() /* 定时器时钟使能 */#define XT_SCOMx_TIM_IRQn TIM1_CC_IRQn /* 定时器中断通道 */#define XT_SCOMx_TIM_PRE_INT_PRIO 1 /* 定时器抢占中断优先级 */#define XT_SCOMx_TIM_SUB_INT_PRIO 1 /* 定时器响应中断优先级 */#define XT_SCOMx_TIM_CCR1 0xFFFF /*一般不要改*//* 定时器CCR1 */#define XT_SCOMx_TIM_CCR2 0xFFFF /*一般不要改*//* 定时器CCR2 */#define XT_SCOMx_TIM_CCR3 0xFFFF /*一般不要改*//* 定时器CCR3 */#define XT_SCOMx_TIM_CCR4 0xFFFF /*一般不要改*//* 定时器CCR4 */#define XT_SCOMx_TIM_TICK_US 1 /*绝对不要改*//* 定时器计数节拍(如:1-&amp;gt;1us) */#define XT_SCOMx_TIM_IRQHandler TIM1_CC_IRQHandler /* 中断向量函数 */ // 串行通信模块-通道1（☆通道总数由[XT_SCOM_SUM]决定☆） #define XT_SCOM1_UART USART1 /* 使用的哪个串口 */#define XT_SCOM1_UART_CLK_EN() __HAL_RCC_USART1_CLK_ENABLE() /* 串口时钟使能 */#define XT_SCOM1_UART_CLK_DI() __HAL_RCC_USART1_CLK_DISABLE() /* 串口时钟禁能 */#define XT_SCOM1_UART_TX_CLK_EN() __HAL_RCC_GPIOA_CLK_ENABLE() /* TX脚时钟使能(不用发送则屏蔽) */#define XT_SCOM1_UART_RX_CLK_EN() __HAL_RCC_GPIOA_CLK_ENABLE() /* RX脚时钟使能(不用接收则屏蔽) */#define XT_SCOM1_UART_IRQn USART1_IRQn /* 中断通道 */#define XT_SCOM1_UART_PRE_INT_PRIO 0 /* 抢占中断优先级 */#define XT_SCOM1_UART_SUB_INT_PRIO 0 /* 响应中断优先级 */#define XT_SCOM1_UART_TX_GPIO GPIOA /* TX 所在端口 */#define XT_SCOM1_UART_TX_PIN GPIO_PIN_9 /* TX 所在管脚 */#define XT_SCOM1_UART_RX_GPIO GPIOA /* RX 所在端口 */#define XT_SCOM1_UART_RX_PIN GPIO_PIN_10 /* RX 所在管脚 */#define XT_SCOM1_UART_RX_IN_MODE GPIO_PULLUP /* RX 输入模式(上拉/悬空) // #define XT_SCOM1_UART_AFIO_REMAP() __HAL_AFIO_REMAP_USART1_ENABLE() // 串口引脚重映射(不使用则屏蔽) // //只有 UART1~3 才有映射 #define XT_SCOM1_DE_CLK_EN() __HAL_RCC_GPIOA_CLK_ENABLE() // DE 端口时钟使能(RS485才使能) // #define XT_SCOM1_DE_GPIO GPIOA // DE 所在端口 (RS485才使能) // #define XT_SCOM1_DE_PIN GPIO_PIN_3 // DE 所在管脚 (RS485才使能) // #define XT_SCOM1_DE_EN() XT_SCOM1_DE_GPIO-&amp;gt;BSRR = XT_SCOM1_DE_PIN // 使能DE控制端 (RS485才使能) // #define XT_SCOM1_DE_DI() XT_SCOM1_DE_GPIO-&amp;gt;BRR = XT_SCOM1_DE_PIN // 禁能DE控制端 (RS485才使能) */#define XT_SCOM1_UART_IRQHandler USART1_IRQHandler /* 中断向量函数 */3、加入初始函数</description>
    </item>
    
    <item>
      <title>红外发送服务模块</title>
      <link>https://o2ospring.github.io/xt/post/20221123/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221123/</guid>
      <description>一、构架 1、功能简介
红外发送服务模块是为应用程序发送红外遥控码提供统一、规范的驱动接口。支持任意载波频率发送（30K～56KHz）；支持直接发送时间码（时间码默认格式为：有载波时间、无载波时间、有、无 …）；支持即时解码发送（通过回调接口实现解一个码发一个码）。
2、模块架构
3、环境要求    环境 要求     软件环境 实时操作系统 或 裸机环境 均可   硬件环境 STM32F103 及更高性能 MCU    4、红外知识
4.1、红外发送编码格式 ：
红外码发送无非就是发送前半段有载波码，再隔一段时间（可理解为是后半段无载波码），如此循环发送多组码。红外编码大体分两部分：起始 + 数据。其中常用 NEC 协议数据编码：起始 + 地址 + 地址(取反) + 数据 + 数据(取反)。NEC 协议信号编码：起始由 9ms 载波码 + 4.5ms 无载波码组成，数据 bit = 0 由 0.56ms 载波码 + 0.56ms 无载波码组成，数据 bit = 1 由 0.56ms 载波码 + 1.68ms 无载波码组成。根据红外码库方案商提供的信息，无载波码最长有超过 100ms，如果使用两字节表示时间码，则建议使用 4us 作为计时单位。</description>
    </item>
    
    <item>
      <title>软件平台规划</title>
      <link>https://o2ospring.github.io/xt/post/20221012/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221012/</guid>
      <description>一、通用技术开发平台 技术小组编写的所有标准模块都是可以跨软硬件平台使用，当这些模块汇总集成时必定需要使用一个通用技术开发平台来作前期测试和后期展示。目前通用技术开发平台的软件选用 RT-thread 实时操作系统，硬件选用 STM32F103 单片机，开发环境为 linux（Ubuntu）桌面系统。关于【编译/调试/构建】等所用到工具都是基于 make（makefile）进行操作（它是所有操作的入口），并且利用多种工具配合组成工具链，完成相关工作！项目仓库网址：https://github.com/o2ospring/xt_rt-thread
 【１】工程脚本：
    功能 工具链 完成     编译 make（makefile）→ gcc √   烧录 make（makefile）→ openocd √   调试 make（makefile）→ cgdb → gdb → openocd √   MDK 工程构建 make（makefile）→ lua ×   MDK 库生成 make（makefile）→ CC_ARM??? ×     【２】工程组成：
    组成 简介 完成     board.</description>
    </item>
    
    <item>
      <title>软件技术规范</title>
      <link>https://o2ospring.github.io/xt/post/20221011/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221011/</guid>
      <description>一、前言  代码编写规范应该在建立一个工程项目之前，并且贯穿整个项目的始终，以保证代码的一致性。采用标准的代码编写惯例，可以大大简化项目的维护负担，最终达到：简洁、一致、易理解、易维护、易移植的目的，非常有利于团队成员的合作。
 二、总规范 为了规范简单易用，不会制作过多的规则！规范总规则为：一）单词与单词使用下划线连接，字符使用全大写或全小写；二）源文件和头文件名称使用全小写；三）变量和数据结构名称使用全小写；四）枚举成员、宏名称使用全大写；五）数据类型名称以_t结尾，枚举类型名称以_e结尾；六）指针名称以p_开头，函数指针名称以_fn结尾，回调函数名称以_cb结尾；七）标准/通用模块的文件、变量、数据结构名称增加xt_前缀，宏定义的名称增加XT_前缀。
三、头文件  使用统一的头部声明； 加入防重复包含的宏； 此头文件包含重映射； 一些依赖头文件包含； 加入C++的兼容语句； 参数配置； 数据类型； 操作函数；  /** * @file xt_eeprom.h * @brief EEPROM存储器操作对象模块 * COPYRIGHT (C) 2022, XT 技术联合小组 * Change Logs: * Date Author Notes * 2022-10-11 o2ospring 原始版本 */ #ifndef XT_EEPROM_H__ #define XT_EEPROM_H__  //######################################################################################################## #include &amp;#34;application.h&amp;#34; /////////////////// &amp;lt;- 按规定[application.h]作为工程所有软件资源管理头文件！ ###ifdef __XT_EEPROM_REMAP_H ///////////////// &amp;lt;- 如果在[application.h]定义此宏，则启动头文件重映射←┐ ## #include &amp;#34;xt_eeprom_remap.h&amp;#34; /////////////// &amp;lt;- 当启动重映射,则头文件包含将映射到本行定义的头文件←┘ ###else //##################################################################################################  #include &amp;lt;stdint.h&amp;gt; //////////////////////// &amp;lt;- 使用的数据定义，如: int8_t, uint32_t 等#if (defined(XT_EEPROM_C__) &amp;amp;&amp;amp; (XT_APP_EEPROM_EN == XT_DEF_ENABLED)) #include &amp;lt;string.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://o2ospring.github.io/xt/post/20221010/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://o2ospring.github.io/xt/post/20221010/</guid>
      <description>XT 技术联合小组  XT 技术联合小组，由一群有梦想的技术工程师组成！【小组代号】使用 XT 作为小组代号，灵感来源 X 战警，表示技术联合小组是一支具有超强战斗力的团队。【小组宗旨】共同搭建一个共性技术开发平台，加速技术成果转化，推动小组成员技术提升，让成员拥有团队的技术力量，充分体现团队技术价值。【2023 目标】搭建通用技术开发平台、DALI 灯具开发平台、 KNX 系统开发平台。【注意事项】由于技术联合小组是自由组织，相关的技术只限于小组成员使用，在任职公司禁止以开源方式使用，避免与公司产生技术知识产权纠纷。
 技术平台  [2022-10-11] 软件技术规范 [2022-10-12] 软件平台规划 [2022-11-28] 软件平台使用 [2022-11-23] 红外发送服务模块 [2022-11-27] 串行通信服务模块 [2022-12-01] 串口虚拟示波器 [2022-12-03] VOFA+串口示波器 [2022-12-05] 无序控制事件服务模块 [2022-12-10] 网络服务模块(硬栈) [2022-12-16] VOFA+网络示波器 [2023-02-23] CRC 校验算法 [2023-02-24] MD5/AES/DES 摘要/加密算法 [2023-02-25] AES-128 加密算法 [2023-02-26] MD5 摘要算法 [2023-02-27] MD5、SHA 摘要算法 [2023-04-13] 单/双色灯调光服务模块 [2023-05-08] 精简版单/双色灯调光服务模块  技术提升 </description>
    </item>
    
  </channel>
</rss>
